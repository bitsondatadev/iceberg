<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Apache Iceberg</title><link>https://iceberg.apache.org/docs/0.12.1/docs/api/</link><description>Recent content on Apache Iceberg</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://iceberg.apache.org/docs/0.12.1/docs/api/index.xml" rel="self" type="application/rss+xml"/><item><title>Java Quickstart</title><link>https://iceberg.apache.org/docs/0.12.1/java-api-quickstart/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://iceberg.apache.org/docs/0.12.1/java-api-quickstart/</guid><description>Java API Quickstart # Create a table # Tables are created using either a Catalog or an implementation of the Tables interface.
Using a Hive catalog # The Hive catalog connects to a Hive metastore to keep track of Iceberg tables. You can initialize a Hive catalog with a name and some properties. (see: Catalog properties)
Note: Currently, setConf is always required for hive catalogs, but this will change in the future.</description></item><item><title>Java API</title><link>https://iceberg.apache.org/docs/0.12.1/api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://iceberg.apache.org/docs/0.12.1/api/</guid><description>Iceberg Java API # Tables # The main purpose of the Iceberg API is to manage table metadata, like schema, partition spec, metadata, and data files that store table data.
Table metadata and operations are accessed through the Table interface. This interface will return table information.
Table metadata # The Table interface provides access to the table metadata:
schema returns the current table schema spec returns the current table partition spec properties returns a map of key-value properties currentSnapshot returns the current table snapshot snapshots returns all valid snapshots for the table snapshot(id) returns a specific snapshot by ID location returns the table&amp;rsquo;s base location Tables also provide refresh to update the table to the latest version, and expose helpers:</description></item><item><title>Java Custom Catalog</title><link>https://iceberg.apache.org/docs/0.12.1/custom-catalog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://iceberg.apache.org/docs/0.12.1/custom-catalog/</guid><description>Custom Catalog Implementation # It&amp;rsquo;s possible to read an iceberg table either from an hdfs path or from a hive table. It&amp;rsquo;s also possible to use a custom metastore in place of hive. The steps to do that are as follows.
Custom TableOperations Custom Catalog Custom FileIO Custom LocationProvider Custom IcebergSource Custom table operations implementation # Extend BaseMetastoreTableOperations to provide implementation on how to read and write metadata</description></item><item><title>Python Quickstart</title><link>https://iceberg.apache.org/docs/0.12.1/python-quickstart/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://iceberg.apache.org/docs/0.12.1/python-quickstart/</guid><description>Python API Quickstart # Installation # Iceberg python is currently in development, for development and testing purposes the best way to install the library is to perform the following steps:
git clone https://github.com/apache/iceberg.git cd iceberg/python pip install -e . Testing # Testing is done using tox. The config can be found in tox.ini within the python directory of the iceberg project.
# simply run tox from within the python dir tox Examples # Inspect Table Metadata # from iceberg.</description></item><item><title>Python API</title><link>https://iceberg.apache.org/docs/0.12.1/python-api-intro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://iceberg.apache.org/docs/0.12.1/python-api-intro/</guid><description>Iceberg Python API # Much of the python api conforms to the java api. You can get more info about the java api here.
Catalog # The Catalog interface, like java provides search and management operations for tables.
To create a catalog:
from iceberg.hive import HiveTables # instantiate Hive Tables conf = {&amp;#34;hive.metastore.uris&amp;#34;: &amp;#39;thrift://{hms_host}:{hms_port}&amp;#39;} tables = HiveTables(conf) and to create a table from a catalog:
from iceberg.api.schema import Schema\ from iceberg.</description></item><item><title>Python Feature Support</title><link>https://iceberg.apache.org/docs/0.12.1/python-feature-support/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://iceberg.apache.org/docs/0.12.1/python-feature-support/</guid><description>Feature Support # The goal is that the python library will provide a functional, performant subset of the java library. The initial focus has been on reading table metadata as well as providing the capability to both plan and execute a scan.
Feature Comparison # Metadata # Operation Java Python Get Schema X X Get Snapshots X X Plan Scan X X Plan Scan for Snapshot X X Update Current Snapshot X Set Table Properties X Create Table X X Drop Table X X Alter Table X Read Support # Pyarrow is used for reading parquet files, so read support is limited to what is currently supported in the pyarrow.</description></item></channel></rss>